#include <iostream>
#include <string>
using namespace std;
class complex
{	
private:
	double real;
	double imag;
public:
	complex(double i=0.0, double j=0.0) :real(i), imag(j){}
	complex operator +(complex &c1);
	complex operator +(int z);
	friend complex operator +(int z, complex &c1);
	complex operator -(complex &c1);
	complex operator *(complex &c1);
	complex operator /(complex &c2);
	void display() {
		cout << real << "+" << imag << "i" << endl;
	}
};
complex complex::operator + (complex &c1) {
	complex a;
	a.real = real + c1.real;
	a.imag = imag + c1.imag;
	return a;
}
//复数和复数的相加
complex complex::operator +(int z) {
	complex a;
	a.real = real + z;
	a.imag = imag;
	return a;
}
//复数与整数的相加
complex operator +(int z, complex &c1) {
	complex a;
	a.real = z + c1.real;
	a.imag = c1.imag;
	return a;
}
//整数和复数的相加
complex complex::operator - (complex &c1) {
	complex a;
	a.real = real-c1.real ;
	a.imag = imag-c1.imag ;
	return a;
}
//减号重载
complex complex::operator * (complex &c1) {
	complex a;
	a.real = real*c1.real-imag*c1.imag;
	a.imag = real*imag + c1.real*imag;
	return a;
}
//乘号重载
complex complex::operator / (complex &c1) {
	complex a;
	a.real = (c1.real*real + imag*c1.imag)/(c1.real*c1.real+c1.imag*c1.imag);
	a.imag = (imag*c1.real - real*c1.imag)/ (c1.real*c1.real + c1.imag*c1.imag);
	return a;
}
//除号重载
int main() {
	complex a(1, 2), b(3, 4), c;
	c = a + b;
	c.display();
	c = b - a;
	c.display();
	c = a * b;
	c.display();
	c = a / b;
	c.display();
	int d = 6;
	c = d + a;
	c.display();
	c = b + d;
	c.display();
	return 0;
}
